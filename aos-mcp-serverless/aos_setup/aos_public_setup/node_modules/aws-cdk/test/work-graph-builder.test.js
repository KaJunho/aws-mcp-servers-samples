"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cx_api_1 = require("@aws-cdk/cx-api");
const work_graph_builder_1 = require("../lib/util/work-graph-builder");
let rootBuilder;
beforeEach(() => {
    rootBuilder = new cx_api_1.CloudAssemblyBuilder();
});
afterEach(() => {
    rootBuilder.delete();
});
describe('with some stacks and assets', () => {
    let assembly;
    beforeEach(() => {
        addSomeStacksAndAssets(rootBuilder);
        assembly = rootBuilder.buildAssembly();
    });
    test('stack depends on the asset publishing step', () => {
        const graph = new work_graph_builder_1.WorkGraphBuilder(true).build(assembly.artifacts);
        expect(assertableNode(graph.node('stack2'))).toEqual(expect.objectContaining({
            type: 'stack',
            dependencies: expect.arrayContaining(['F1:D1-publish']),
        }));
    });
    test('asset publishing step depends on asset building step', () => {
        const graph = new work_graph_builder_1.WorkGraphBuilder(true).build(assembly.artifacts);
        expect(graph.node('F1:D1-publish')).toEqual(expect.objectContaining({
            type: 'asset-publish',
            dependencies: new Set(['F1:D1-build']),
        }));
    });
    test('with prebuild off, asset building inherits dependencies from their parent stack', () => {
        const graph = new work_graph_builder_1.WorkGraphBuilder(false).build(assembly.artifacts);
        expect(graph.node('F1:D1-build')).toEqual(expect.objectContaining({
            type: 'asset-build',
            dependencies: new Set(['stack0', 'stack1']),
        }));
    });
    test('with prebuild on, assets only have their own dependencies', () => {
        const graph = new work_graph_builder_1.WorkGraphBuilder(true).build(assembly.artifacts);
        expect(graph.node('F1:D1-build')).toEqual(expect.objectContaining({
            type: 'asset-build',
            dependencies: new Set(['stack0']),
        }));
    });
});
test('tree metadata is ignored', async () => {
    rootBuilder.addArtifact('tree', {
        type: cxschema.ArtifactType.CDK_TREE,
        properties: {
            file: 'doesnotexist.json',
        },
    });
    const assembly = rootBuilder.buildAssembly();
    const graph = new work_graph_builder_1.WorkGraphBuilder(true).build(assembly.artifacts);
    expect(graph.ready().length).toEqual(0);
});
test('can handle nested assemblies', async () => {
    addSomeStacksAndAssets(rootBuilder);
    const nested = rootBuilder.createNestedAssembly('nested', 'Nested Assembly');
    addSomeStacksAndAssets(nested);
    nested.buildAssembly();
    const assembly = rootBuilder.buildAssembly();
    let workDone = 0;
    const graph = new work_graph_builder_1.WorkGraphBuilder(true).build(assembly.artifacts);
    await graph.doParallel(10, {
        deployStack: async () => { workDone += 1; },
        buildAsset: async () => { },
        publishAsset: async () => { workDone += 1; },
    });
    expect(workDone).toEqual(8);
});
test('dependencies on unselected artifacts are silently ignored', async () => {
    addStack(rootBuilder, 'stackA', {
        environment: 'aws://222222/us-east-1',
    });
    addStack(rootBuilder, 'stackB', {
        dependencies: ['stackA'],
        environment: 'aws://222222/us-east-1',
    });
    const asm = rootBuilder.buildAssembly();
    const graph = new work_graph_builder_1.WorkGraphBuilder(true).build([asm.getStackArtifact('stackB')]);
    expect(graph.ready()[0]).toEqual(expect.objectContaining({
        id: 'stackB',
        dependencies: new Set(),
    }));
});
/**
 * Write an asset manifest file and add it to the assembly builder
 */
function addAssets(builder, artifactId, options) {
    const manifestFile = `${artifactId}.json`;
    const outPath = path.join(builder.outdir, manifestFile);
    const manifest = {
        version: cxschema.Manifest.version(),
        files: options.files,
    };
    fs.writeFileSync(outPath, JSON.stringify(manifest, undefined, 2));
    builder.addArtifact(artifactId, {
        type: cxschema.ArtifactType.ASSET_MANIFEST,
        dependencies: options.dependencies,
        properties: {
            file: manifestFile,
        },
    });
}
/**
 * Add a stack to the cloud assembly
 */
function addStack(builder, stackId, options) {
    const templateFile = `${stackId}.template.json`;
    const outPath = path.join(builder.outdir, templateFile);
    fs.writeFileSync(outPath, JSON.stringify({}, undefined, 2));
    builder.addArtifact(stackId, {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        dependencies: options.dependencies,
        environment: options.environment,
        properties: {
            templateFile,
        },
    });
}
function addSomeStacksAndAssets(builder) {
    addStack(builder, 'stack0', {
        environment: 'aws://11111/us-east-1',
    });
    addAssets(builder, 'stack2assets', {
        dependencies: ['stack0'],
        files: {
            F1: {
                source: { path: 'xyz' },
                destinations: {
                    D1: { bucketName: 'bucket', objectKey: 'key' },
                },
            },
        },
    });
    addStack(builder, 'stack1', {
        environment: 'aws://11111/us-east-1',
    });
    addStack(builder, 'stack2', {
        environment: 'aws://11111/us-east-1',
        dependencies: ['stack2assets', 'stack1'],
    });
}
/**
 * We can't do arrayContaining on the set that a Node has, so convert it to an array for asserting
 */
function assertableNode(x) {
    return {
        ...x,
        dependencies: Array.from(x.dependencies),
    };
}
//# sourceMappingURL=data:application/json;base64,