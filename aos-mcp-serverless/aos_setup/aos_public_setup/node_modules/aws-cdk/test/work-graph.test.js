"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const work_graph_1 = require("../lib/util/work-graph");
const work_graph_types_1 = require("../lib/util/work-graph-types");
const DUMMY = 'DUMMY';
const sleep = async (duration) => new Promise((resolve) => setTimeout(() => resolve(), duration));
// Not great to have actual sleeps in the tests, but they mostly just exist to give the async workflow
// a chance to start new tasks.
const SLOW = 200;
/**
 * Repurposing unused stack attributes to create specific test scenarios
 * - stack.name          = deployment duration
 * - stack.displayName   = error message
 */
describe('WorkGraph', () => {
    const actionedAssets = [];
    const callbacks = {
        deployStack: async (x) => {
            const errorMessage = x.stack.displayName;
            const timeout = Number(x.stack.stackName) || 0;
            await sleep(timeout);
            // Special case for testing NestedCloudAssemblyArtifacts
            if (errorMessage && !errorMessage.startsWith('Nested')) {
                throw Error(errorMessage);
            }
            actionedAssets.push(x.id);
        },
        buildAsset: async ({ id }) => {
            actionedAssets.push(id);
        },
        publishAsset: async ({ id }) => {
            actionedAssets.push(id);
        },
    };
    beforeEach(() => {
        actionedAssets.splice(0);
    });
    // Success
    test.each([
        // Concurrency 1
        { scenario: 'No Stacks', concurrency: 1, toDeploy: [], expected: [] },
        { scenario: 'A', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }]), expected: ['A'] },
        { scenario: 'A, B', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack' }]), expected: ['A', 'B'] },
        { scenario: 'A -> B', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }]), expected: ['A', 'B'] },
        { scenario: '[unsorted] A -> B', concurrency: 1, toDeploy: createArtifacts([{ id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'A', type: 'stack' }]), expected: ['A', 'B'] },
        { scenario: 'A -> B -> C', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'C', type: 'stack', stackDependencies: ['B'] }]), expected: ['A', 'B', 'C'] },
        { scenario: 'A -> B, A -> C', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'C', type: 'stack', stackDependencies: ['A'] }]), expected: ['A', 'B', 'C'] },
        {
            scenario: 'A (slow), B',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', name: SLOW },
                { id: 'B', type: 'stack' },
            ]),
            expected: ['A', 'B'],
        },
        {
            scenario: 'A -> B, C -> D',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack' },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack' },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expected: ['A', 'C', 'B', 'D'],
        },
        {
            scenario: 'A (slow) -> B, C -> D',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', name: SLOW },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack' },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expected: ['A', 'C', 'B', 'D'],
        },
        // With Assets
        {
            scenario: 'A -> a',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', assetDependencies: ['a'] },
                { id: 'a', type: 'asset' },
            ]),
            expected: ['a-build', 'a-publish', 'A'],
        },
        {
            scenario: 'A -> [a, B]',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', stackDependencies: ['B'], assetDependencies: ['a'] },
                { id: 'B', type: 'stack' },
                { id: 'a', type: 'asset', name: SLOW },
            ]),
            expected: ['B', 'a-build', 'a-publish', 'A'],
        },
        {
            scenario: 'A -> a, B -> b',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', assetDependencies: ['a'] },
                { id: 'B', type: 'stack', assetDependencies: ['b'] },
                { id: 'a', type: 'asset' },
                { id: 'b', type: 'asset' },
            ]),
            expected: ['a-build', 'b-build', 'a-publish', 'b-publish', 'A', 'B'],
        },
        {
            scenario: 'A, B -> b -> A',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack' },
                { id: 'B', type: 'stack', assetDependencies: ['b'] },
                { id: 'b', type: 'asset', stackDependencies: ['A'] },
            ]),
            expected: ['A', 'b-build', 'b-publish', 'B'],
        },
        // Concurrency 2
        { scenario: 'No Stacks', concurrency: 2, toDeploy: [], expected: [] },
        { scenario: 'A', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }]), expected: ['A'] },
        { scenario: 'A, B', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack' }]), expected: ['A', 'B'] },
        { scenario: 'A -> B', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }]), expected: ['A', 'B'] },
        { scenario: '[unsorted] A -> B', concurrency: 2, toDeploy: createArtifacts([{ id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'A', type: 'stack' }]), expected: ['A', 'B'] },
        { scenario: 'A -> B -> C', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'C', type: 'stack', stackDependencies: ['B'] }]), expected: ['A', 'B', 'C'] },
        { scenario: 'A -> B, A -> C', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'C', type: 'stack', stackDependencies: ['A'] }]), expected: ['A', 'B', 'C'] },
        {
            scenario: 'A, B',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', name: SLOW },
                { id: 'B', type: 'stack' },
            ]),
            expected: ['B', 'A'],
        },
        {
            scenario: 'A -> B, C -> D',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack' },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack' },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expected: ['A', 'C', 'B', 'D'],
        },
        {
            scenario: 'A (slow) -> B, C -> D',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', name: SLOW },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack' },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expected: ['C', 'D', 'A', 'B'],
        },
        {
            scenario: 'A -> B, A not selected',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
            ]),
            expected: ['B'],
        },
        // With Assets
        {
            scenario: 'A -> a',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', assetDependencies: ['a'] },
                { id: 'a', type: 'asset' },
            ]),
            expected: ['a-build', 'a-publish', 'A'],
        },
        {
            scenario: 'A -> [a, B]',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', stackDependencies: ['B'], assetDependencies: ['a'] },
                { id: 'B', type: 'stack', name: SLOW },
                { id: 'a', type: 'asset' },
            ]),
            expected: ['a-build', 'a-publish', 'B', 'A'],
        },
        {
            scenario: 'A -> a, B -> b',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', assetDependencies: ['a'] },
                { id: 'B', type: 'stack', assetDependencies: ['b'] },
                { id: 'a', type: 'asset' },
                { id: 'b', type: 'asset' },
            ]),
            expected: ['a-build', 'b-build', 'a-publish', 'b-publish', 'A', 'B'],
        },
        {
            scenario: 'A, B -> b -> A',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack' },
                { id: 'B', type: 'stack', assetDependencies: ['b'] },
                { id: 'b', type: 'asset', stackDependencies: ['A'] },
            ]),
            expected: ['A', 'b-build', 'b-publish', 'B'],
        },
        {
            scenario: 'A, B -> [b, c], b -> A',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', name: SLOW },
                { id: 'B', type: 'stack', assetDependencies: ['b', 'c'] },
                { id: 'b', type: 'asset', stackDependencies: ['A'] },
                { id: 'c', type: 'asset' },
            ]),
            expected: ['c-build', 'c-publish', 'A', 'b-build', 'b-publish', 'B'],
        },
    ])('Success - Concurrency: $concurrency - $scenario', async ({ concurrency, expected, toDeploy }) => {
        const graph = new work_graph_1.WorkGraph();
        addTestArtifactsToGraph(toDeploy, graph);
        await graph.doParallel(concurrency, callbacks);
        expect(actionedAssets).toStrictEqual(expected);
    });
    test('can remove unnecessary assets', async () => {
        const graph = new work_graph_1.WorkGraph();
        addTestArtifactsToGraph([
            { id: 'a', type: 'asset' },
            { id: 'b', type: 'asset' },
            { id: 'A', type: 'stack', assetDependencies: ['a', 'b'] },
        ], graph);
        // Remove 'b' from the graph
        await graph.removeUnnecessaryAssets(node => Promise.resolve(node.id.startsWith('b')));
        await graph.doParallel(1, callbacks);
        // We expect to only see 'a' and 'A'
        expect(actionedAssets).toEqual(['a-build', 'a-publish', 'A']);
    });
    // Failure
    test.each([
        // Concurrency 1
        { scenario: 'A (error)', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack', displayName: 'A' }]), expectedError: 'A', expectedStacks: [] },
        { scenario: 'A (error), B', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack', displayName: 'A' }, { id: 'B', type: 'stack' }]), expectedError: 'A', expectedStacks: [] },
        { scenario: 'A, B (error)', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', displayName: 'B' }]), expectedError: 'B', expectedStacks: ['A'] },
        { scenario: 'A (error) -> B', concurrency: 1, toDeploy: createArtifacts([{ id: 'A', type: 'stack', displayName: 'A' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }]), expectedError: 'A', expectedStacks: [] },
        { scenario: '[unsorted] A (error) -> B', concurrency: 1, toDeploy: createArtifacts([{ id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'A', type: 'stack', displayName: 'A' }]), expectedError: 'A', expectedStacks: [] },
        {
            scenario: 'A (error) -> B, C -> D',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', displayName: 'A' },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack' },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expectedError: 'A',
            expectedStacks: [],
        },
        {
            scenario: 'A -> B, C (error) -> D',
            concurrency: 1,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack' },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack', displayName: 'C', name: SLOW },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expectedError: 'C',
            expectedStacks: ['A'],
        },
        // Concurrency 2
        { scenario: 'A (error)', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack', displayName: 'A' }]), expectedError: 'A', expectedStacks: [] },
        { scenario: 'A (error), B', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack', displayName: 'A' }, { id: 'B', type: 'stack' }]), expectedError: 'A', expectedStacks: ['B'] },
        { scenario: 'A, B (error)', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack' }, { id: 'B', type: 'stack', displayName: 'B' }]), expectedError: 'B', expectedStacks: ['A'] },
        { scenario: 'A (error) -> B', concurrency: 2, toDeploy: createArtifacts([{ id: 'A', type: 'stack', displayName: 'A' }, { id: 'B', type: 'stack', stackDependencies: ['A'] }]), expectedError: 'A', expectedStacks: [] },
        { scenario: '[unsorted] A (error) -> B', concurrency: 2, toDeploy: createArtifacts([{ id: 'B', type: 'stack', stackDependencies: ['A'] }, { id: 'A', type: 'stack', displayName: 'A' }]), expectedError: 'A', expectedStacks: [] },
        {
            scenario: 'A (error) -> B, C -> D',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack', displayName: 'A' },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack' },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expectedError: 'A',
            expectedStacks: ['C'],
        },
        {
            scenario: 'A -> B, C (error) -> D',
            concurrency: 2,
            toDeploy: createArtifacts([
                { id: 'A', type: 'stack' },
                { id: 'B', type: 'stack', stackDependencies: ['A'] },
                { id: 'C', type: 'stack', displayName: 'C', name: SLOW },
                { id: 'D', type: 'stack', stackDependencies: ['C'] },
            ]),
            expectedError: 'C',
            expectedStacks: ['A', 'B'],
        },
    ])('Failure - Concurrency: $concurrency - $scenario', async ({ concurrency, expectedError, toDeploy, expectedStacks }) => {
        const graph = new work_graph_1.WorkGraph();
        addTestArtifactsToGraph(toDeploy, graph);
        await expect(graph.doParallel(concurrency, callbacks)).rejects.toThrowError(expectedError);
        expect(actionedAssets).toStrictEqual(expectedStacks);
    });
});
function createArtifacts(artifacts) {
    return artifacts;
}
function addTestArtifactsToGraph(toDeploy, graph) {
    for (const node of toDeploy) {
        switch (node.type) {
            case 'stack':
                graph.addNodes({
                    type: 'stack',
                    id: node.id,
                    deploymentState: work_graph_types_1.DeploymentState.PENDING,
                    stack: {
                        // We're smuggling information here so that the set of callbacks can do some appropriate action
                        stackName: node.name,
                        displayName: node.displayName, // Used to smuggle exception triggers
                    },
                    dependencies: new Set([...node.stackDependencies ?? [], ...(node.assetDependencies ?? []).map(x => `${x}-publish`)]),
                });
                break;
            case 'asset':
                graph.addNodes({
                    type: 'asset-build',
                    id: `${node.id}-build`,
                    deploymentState: work_graph_types_1.DeploymentState.PENDING,
                    asset: DUMMY,
                    assetManifest: DUMMY,
                    assetManifestArtifact: DUMMY,
                    parentStack: DUMMY,
                    dependencies: new Set([...node.stackDependencies ?? [], ...(node.assetDependencies ?? []).map(x => `${x}-publish`)]),
                });
                graph.addNodes({
                    type: 'asset-publish',
                    id: `${node.id}-publish`,
                    deploymentState: work_graph_types_1.DeploymentState.PENDING,
                    asset: DUMMY,
                    assetManifest: DUMMY,
                    assetManifestArtifact: DUMMY,
                    parentStack: DUMMY,
                    dependencies: new Set([`${node.id}-build`]),
                });
                break;
        }
    }
    graph.removeUnavailableDependencies();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay1ncmFwaC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid29yay1ncmFwaC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdURBQW1EO0FBQ25ELG1FQUE0RztBQUU1RyxNQUFNLEtBQUssR0FBUSxPQUFPLENBQUM7QUFFM0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxFQUFFLFFBQWdCLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUVoSCxzR0FBc0c7QUFDdEcsK0JBQStCO0FBQy9CLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUVqQjs7OztHQUlHO0FBQ0gsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDekIsTUFBTSxjQUFjLEdBQWEsRUFBRSxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHO1FBQ2hCLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBWSxFQUFFLEVBQUU7WUFDbEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRS9DLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXJCLHdEQUF3RDtZQUN4RCxJQUFJLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3RELE1BQU0sS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzNCO1lBRUQsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELFVBQVUsRUFBRSxLQUFLLEVBQUMsRUFBRSxFQUFFLEVB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RSxXQUFXLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ3RMLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDM08sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxHQUFH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RyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztpQkFDckgsQ0FBQyxDQUFDO2dCQUNILEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQ2IsSUFBSSxFQUFFLGVBQWU7b0JBQ3JCLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLFVBQVU7b0JBQ3hCLGVBQWUsRUFBRSxrQ0FBZSxDQUFDLE9BQU87b0JBQ3hDLEtBQUssRUFBRSxLQUFLO29CQUNaLGFBQWEsRUFBRSxLQUFLO29CQUNwQixxQkFBcUIsRUFBRSxLQUFLO29CQUM1QixXQUFXLEVBQUUsS0FBSztvQkFDbEIsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztpQkFDNUMsQ0FBQyxDQUFDO2dCQUNILE1BQU07U0FDVDtLQUNGO0lBQ0QsS0FBSyxDQUFDLDZCQUE2QixFQUFFLENBQUM7QUFDeEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmtHcmFwaCB9IGZyb20gJy4uL2xpYi91dGlsL3dvcmstZ3JhcGgnO1xuaW1wb3J0IHsgQXNzZXRCdWlsZE5vZGUsIEFzc2V0UHVibGlzaE5vZGUsIERlcGxveW1lbnRTdGF0ZSwgU3RhY2tOb2RlIH0gZnJvbSAnLi4vbGliL3V0aWwvd29yay1ncmFwaC10eXBlcyc7XG5cbmNvbnN0IERVTU1ZOiBhbnkgPSAnRFVNTVknO1xuXG5jb25zdCBzbGVlcCA9IGFzeW5jIChkdXJhdGlvbjogbnVtYmVyKSA9PiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCksIGR1cmF0aW9uKSk7XG5cbi8vIE5vdCBncmVhdCB0byBoYXZlIGFjdHVhbCBzbGVlcHMgaW4gdGhlIHRlc3RzLCBidXQgdGhleSBtb3N0bHkganVzdCBleGlzdCB0byBnaXZlIHRoZSBhc3luYyB3b3JrZmxvd1xuLy8gYSBjaGFuY2UgdG8gc3RhcnQgbmV3IHRhc2tzLlxuY29uc3QgU0xPVyA9IDIwMDtcblxuLyoqXG4gKiBSZXB1cnBvc2luZyB1bnVzZWQgc3RhY2sgYXR0cmlidXRlcyB0byBjcmVhdGUgc3BlY2lmaWMgdGVzdCBzY2VuYXJpb3NcbiAqIC0gc3RhY2submFtZSAgICAgICAgICA9IGRlcGxveW1lbnQgZHVyYXRpb25cbiAqIC0gc3RhY2suZGlzcGxheU5hbWUgICA9IGVycm9yIG1lc3NhZ2VcbiAqL1xuZGVzY3JpYmUoJ1dvcmtHcmFwaCcsICgpID0+IHtcbiAgY29uc3QgYWN0aW9uZWRBc3NldHM6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IGNhbGxiYWNrcyA9IHtcbiAgICBkZXBsb3lTdGFjazogYXN5bmMgKHg6IFN0YWNrTm9kZSkgPT4ge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0geC5zdGFjay5kaXNwbGF5TmFtZTtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBOdW1iZXIoeC5zdGFjay5zdGFja05hbWUpIHx8IDA7XG5cbiAgICAgIGF3YWl0IHNsZWVwKHRpbWVvdXQpO1xuXG4gICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRlc3RpbmcgTmVzdGVkQ2xvdWRBc3NlbWJseUFydGlmYWN0c1xuICAgICAgaWYgKGVycm9yTWVzc2FnZSAmJiAhZXJyb3JNZXNzYWdlLnN0YXJ0c1dpdGgoJ05lc3RlZCcpKSB7XG4gICAgICAgIHRocm93IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbmVkQXNzZXRzLnB1c2goeC5pZCk7XG4gICAgfSxcbiAgICBidWlsZEFzc2V0OiBhc3luYyh7IGlkIH06IEFzc2V0QnVpbGROb2RlKSA9PiB7XG4gICAgICBhY3Rpb25lZEFzc2V0cy5wdXNoKGlkKTtcbiAgICB9LFxuICAgIHB1Ymxpc2hBc3NldDogYXN5bmMoeyBpZCB9OiBBc3NldFB1Ymxpc2hOb2RlKSA9PiB7XG4gICAgICBhY3Rpb25lZEFzc2V0cy5wdXNoKGlkKTtcbiAgICB9LFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGFjdGlvbmVkQXNzZXRzLnNwbGljZSgwKTtcbiAgfSk7XG5cbiAgLy8gU3VjY2Vzc1xuICB0ZXN0LmVhY2goW1xuICAgIC8vIENvbmN1cnJlbmN5IDFcbiAgICB7IHNjZW5hcmlvOiAnTm8gU3RhY2tzJywgY29uY3VycmVuY3k6IDEsIHRvRGVwbG95OiBbXSwgZXhwZWN0ZWQ6IFtdIH0sXG4gICAgeyBzY2VuYXJpbzogJ0EnLCBjb25jdXJyZW5jeTogMSwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snIH1dKSwgZXhwZWN0ZWQ6IFsnQSddIH0sXG4gICAgeyBzY2VuYXJpbzogJ0EsIEInLCBjb25jdXJyZW5jeTogMSwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snIH0sIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJyB9XSksIGV4cGVjdGVkOiBbJ0EnLCAnQiddIH0sXG4gICAgeyBzY2VuYXJpbzogJ0EgLT4gQicsIGNvbmN1cnJlbmN5OiAxLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycgfSwgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfV0pLCBleHBlY3RlZDogWydBJywgJ0InXSB9LFxuICAgIHsgc2NlbmFyaW86ICdbdW5zb3J0ZWRdIEEgLT4gQicsIGNvbmN1cnJlbmN5OiAxLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LCB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycgfV0pLCBleHBlY3RlZDogWydBJywgJ0InXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBIC0+IEIgLT4gQycsIGNvbmN1cnJlbmN5OiAxLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycgfSwgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfSwgeyBpZDogJ0MnLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydCJ10gfV0pLCBleHBlY3RlZDogWydBJywgJ0InLCAnQyddIH0sXG4gICAgeyBzY2VuYXJpbzogJ0EgLT4gQiwgQSAtPiBDJywgY29uY3VycmVuY3k6IDEsIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW3sgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LCB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LCB7IGlkOiAnQycsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9XSksIGV4cGVjdGVkOiBbJ0EnLCAnQicsICdDJ10gfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgKHNsb3cpLCBCJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgbmFtZTogU0xPVyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycgfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnQScsICdCJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgLT4gQiwgQyAtPiBEJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LFxuICAgICAgICB7IGlkOiAnQycsIHR5cGU6ICdzdGFjaycgfSxcbiAgICAgICAgeyBpZDogJ0QnLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydDJ10gfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnQScsICdDJywgJ0InLCAnRCddLFxuICAgIH0sXG4gICAge1xuICAgICAgc2NlbmFyaW86ICdBIChzbG93KSAtPiBCLCBDIC0+IEQnLFxuICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgICB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFtcbiAgICAgICAgeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snLCBuYW1lOiBTTE9XIH0sXG4gICAgICAgIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH0sXG4gICAgICAgIHsgaWQ6ICdDJywgdHlwZTogJ3N0YWNrJyB9LFxuICAgICAgICB7IGlkOiAnRCcsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0MnXSB9LFxuICAgICAgXSksXG4gICAgICBleHBlY3RlZDogWydBJywgJ0MnLCAnQicsICdEJ10sXG4gICAgfSxcbiAgICAvLyBXaXRoIEFzc2V0c1xuICAgIHtcbiAgICAgIHNjZW5hcmlvOiAnQSAtPiBhJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgYXNzZXREZXBlbmRlbmNpZXM6IFsnYSddIH0sXG4gICAgICAgIHsgaWQ6ICdhJywgdHlwZTogJ2Fzc2V0JyB9LFxuICAgICAgXSksXG4gICAgICBleHBlY3RlZDogWydhLWJ1aWxkJywgJ2EtcHVibGlzaCcsICdBJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgLT4gW2EsIEJdJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQiddLCBhc3NldERlcGVuZGVuY2llczogWydhJ10gfSxcbiAgICAgICAgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snIH0sXG4gICAgICAgIHsgaWQ6ICdhJywgdHlwZTogJ2Fzc2V0JywgbmFtZTogU0xPVyB9LFxuICAgICAgXSksXG4gICAgICBleHBlY3RlZDogWydCJywgJ2EtYnVpbGQnLCAnYS1wdWJsaXNoJywgJ0EnXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjZW5hcmlvOiAnQSAtPiBhLCBCIC0+IGInLFxuICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgICB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFtcbiAgICAgICAgeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snLCBhc3NldERlcGVuZGVuY2llczogWydhJ10gfSxcbiAgICAgICAgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBhc3NldERlcGVuZGVuY2llczogWydiJ10gfSxcbiAgICAgICAgeyBpZDogJ2EnLCB0eXBlOiAnYXNzZXQnIH0sXG4gICAgICAgIHsgaWQ6ICdiJywgdHlwZTogJ2Fzc2V0JyB9LFxuICAgICAgXSksXG4gICAgICBleHBlY3RlZDogWydhLWJ1aWxkJywgJ2ItYnVpbGQnLCAnYS1wdWJsaXNoJywgJ2ItcHVibGlzaCcsICdBJywgJ0InXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjZW5hcmlvOiAnQSwgQiAtPiBiIC0+IEEnLFxuICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgICB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFtcbiAgICAgICAgeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snIH0sXG4gICAgICAgIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgYXNzZXREZXBlbmRlbmNpZXM6IFsnYiddIH0sXG4gICAgICAgIHsgaWQ6ICdiJywgdHlwZTogJ2Fzc2V0Jywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH0sXG4gICAgICBdKSxcbiAgICAgIGV4cGVjdGVkOiBbJ0EnLCAnYi1idWlsZCcsICdiLXB1Ymxpc2gnLCAnQiddLFxuICAgIH0sXG5cbiAgICAvLyBDb25jdXJyZW5jeSAyXG4gICAgeyBzY2VuYXJpbzogJ05vIFN0YWNrcycsIGNvbmN1cnJlbmN5OiAyLCB0b0RlcGxveTogW10sIGV4cGVjdGVkOiBbXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBJywgY29uY3VycmVuY3k6IDIsIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW3sgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9XSksIGV4cGVjdGVkOiBbJ0EnXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBLCBCJywgY29uY3VycmVuY3k6IDIsIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW3sgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LCB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycgfV0pLCBleHBlY3RlZDogWydBJywgJ0InXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBIC0+IEInLCBjb25jdXJyZW5jeTogMiwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snIH0sIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH1dKSwgZXhwZWN0ZWQ6IFsnQScsICdCJ10gfSxcbiAgICB7IHNjZW5hcmlvOiAnW3Vuc29ydGVkXSBBIC0+IEInLCBjb25jdXJyZW5jeTogMiwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfSwgeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snIH1dKSwgZXhwZWN0ZWQ6IFsnQScsICdCJ10gfSxcbiAgICB7IHNjZW5hcmlvOiAnQSAtPiBCIC0+IEMnLCBjb25jdXJyZW5jeTogMiwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snIH0sIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH0sIHsgaWQ6ICdDJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQiddIH1dKSwgZXhwZWN0ZWQ6IFsnQScsICdCJywgJ0MnXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBIC0+IEIsIEEgLT4gQycsIGNvbmN1cnJlbmN5OiAyLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycgfSwgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfSwgeyBpZDogJ0MnLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfV0pLCBleHBlY3RlZDogWydBJywgJ0InLCAnQyddIH0sXG4gICAge1xuICAgICAgc2NlbmFyaW86ICdBLCBCJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAyLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgbmFtZTogU0xPVyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycgfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnQicsICdBJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgLT4gQiwgQyAtPiBEJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAyLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LFxuICAgICAgICB7IGlkOiAnQycsIHR5cGU6ICdzdGFjaycgfSxcbiAgICAgICAgeyBpZDogJ0QnLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydDJ10gfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnQScsICdDJywgJ0InLCAnRCddLFxuICAgIH0sXG4gICAge1xuICAgICAgc2NlbmFyaW86ICdBIChzbG93KSAtPiBCLCBDIC0+IEQnLFxuICAgICAgY29uY3VycmVuY3k6IDIsXG4gICAgICB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFtcbiAgICAgICAgeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snLCBuYW1lOiBTTE9XIH0sXG4gICAgICAgIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH0sXG4gICAgICAgIHsgaWQ6ICdDJywgdHlwZTogJ3N0YWNrJyB9LFxuICAgICAgICB7IGlkOiAnRCcsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0MnXSB9LFxuICAgICAgXSksXG4gICAgICBleHBlY3RlZDogWydDJywgJ0QnLCAnQScsICdCJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgLT4gQiwgQSBub3Qgc2VsZWN0ZWQnLFxuICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgICB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFtcbiAgICAgICAgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnQiddLFxuICAgIH0sXG4gICAgLy8gV2l0aCBBc3NldHNcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgLT4gYScsXG4gICAgICBjb25jdXJyZW5jeTogMixcbiAgICAgIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW1xuICAgICAgICB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIGFzc2V0RGVwZW5kZW5jaWVzOiBbJ2EnXSB9LFxuICAgICAgICB7IGlkOiAnYScsIHR5cGU6ICdhc3NldCcgfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnYS1idWlsZCcsICdhLXB1Ymxpc2gnLCAnQSddLFxuICAgIH0sXG4gICAge1xuICAgICAgc2NlbmFyaW86ICdBIC0+IFthLCBCXScsXG4gICAgICBjb25jdXJyZW5jeTogMixcbiAgICAgIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW1xuICAgICAgICB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0InXSwgYXNzZXREZXBlbmRlbmNpZXM6IFsnYSddIH0sXG4gICAgICAgIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgbmFtZTogU0xPVyB9LFxuICAgICAgICB7IGlkOiAnYScsIHR5cGU6ICdhc3NldCcgfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnYS1idWlsZCcsICdhLXB1Ymxpc2gnLCAnQicsICdBJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EgLT4gYSwgQiAtPiBiJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAyLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgYXNzZXREZXBlbmRlbmNpZXM6IFsnYSddIH0sXG4gICAgICAgIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgYXNzZXREZXBlbmRlbmNpZXM6IFsnYiddIH0sXG4gICAgICAgIHsgaWQ6ICdhJywgdHlwZTogJ2Fzc2V0JyB9LFxuICAgICAgICB7IGlkOiAnYicsIHR5cGU6ICdhc3NldCcgfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnYS1idWlsZCcsICdiLWJ1aWxkJywgJ2EtcHVibGlzaCcsICdiLXB1Ymxpc2gnLCAnQScsICdCJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2VuYXJpbzogJ0EsIEIgLT4gYiAtPiBBJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAyLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIGFzc2V0RGVwZW5kZW5jaWVzOiBbJ2InXSB9LFxuICAgICAgICB7IGlkOiAnYicsIHR5cGU6ICdhc3NldCcsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LFxuICAgICAgXSksXG4gICAgICBleHBlY3RlZDogWydBJywgJ2ItYnVpbGQnLCAnYi1wdWJsaXNoJywgJ0InXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjZW5hcmlvOiAnQSwgQiAtPiBbYiwgY10sIGIgLT4gQScsXG4gICAgICBjb25jdXJyZW5jeTogMixcbiAgICAgIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW1xuICAgICAgICB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIG5hbWU6IFNMT1cgfSxcbiAgICAgICAgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBhc3NldERlcGVuZGVuY2llczogWydiJywgJ2MnXSB9LFxuICAgICAgICB7IGlkOiAnYicsIHR5cGU6ICdhc3NldCcsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LFxuICAgICAgICB7IGlkOiAnYycsIHR5cGU6ICdhc3NldCcgfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWQ6IFsnYy1idWlsZCcsICdjLXB1Ymxpc2gnLCAnQScsICdiLWJ1aWxkJywgJ2ItcHVibGlzaCcsICdCJ10sXG4gICAgfSxcbiAgXSkoJ1N1Y2Nlc3MgLSBDb25jdXJyZW5jeTogJGNvbmN1cnJlbmN5IC0gJHNjZW5hcmlvJywgYXN5bmMgKHsgY29uY3VycmVuY3ksIGV4cGVjdGVkLCB0b0RlcGxveSB9KSA9PiB7XG4gICAgY29uc3QgZ3JhcGggPSBuZXcgV29ya0dyYXBoKCk7XG4gICAgYWRkVGVzdEFydGlmYWN0c1RvR3JhcGgodG9EZXBsb3ksIGdyYXBoKTtcblxuICAgIGF3YWl0IGdyYXBoLmRvUGFyYWxsZWwoY29uY3VycmVuY3ksIGNhbGxiYWNrcyk7XG5cbiAgICBleHBlY3QoYWN0aW9uZWRBc3NldHMpLnRvU3RyaWN0RXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcblxuICB0ZXN0KCdjYW4gcmVtb3ZlIHVubmVjZXNzYXJ5IGFzc2V0cycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBncmFwaCA9IG5ldyBXb3JrR3JhcGgoKTtcbiAgICBhZGRUZXN0QXJ0aWZhY3RzVG9HcmFwaChbXG4gICAgICB7IGlkOiAnYScsIHR5cGU6ICdhc3NldCcgfSxcbiAgICAgIHsgaWQ6ICdiJywgdHlwZTogJ2Fzc2V0JyB9LFxuICAgICAgeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snLCBhc3NldERlcGVuZGVuY2llczogWydhJywgJ2InXSB9LFxuICAgIF0sIGdyYXBoKTtcblxuICAgIC8vIFJlbW92ZSAnYicgZnJvbSB0aGUgZ3JhcGhcbiAgICBhd2FpdCBncmFwaC5yZW1vdmVVbm5lY2Vzc2FyeUFzc2V0cyhub2RlID0+IFByb21pc2UucmVzb2x2ZShub2RlLmlkLnN0YXJ0c1dpdGgoJ2InKSkpO1xuICAgIGF3YWl0IGdyYXBoLmRvUGFyYWxsZWwoMSwgY2FsbGJhY2tzKTtcblxuICAgIC8vIFdlIGV4cGVjdCB0byBvbmx5IHNlZSAnYScgYW5kICdBJ1xuICAgIGV4cGVjdChhY3Rpb25lZEFzc2V0cykudG9FcXVhbChbJ2EtYnVpbGQnLCAnYS1wdWJsaXNoJywgJ0EnXSk7XG4gIH0pO1xuXG5cbiAgLy8gRmFpbHVyZVxuICB0ZXN0LmVhY2goW1xuICAgIC8vIENvbmN1cnJlbmN5IDFcbiAgICB7IHNjZW5hcmlvOiAnQSAoZXJyb3IpJywgY29uY3VycmVuY3k6IDEsIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW3sgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgZGlzcGxheU5hbWU6ICdBJyB9XSksIGV4cGVjdGVkRXJyb3I6ICdBJywgZXhwZWN0ZWRTdGFja3M6IFtdIH0sXG4gICAgeyBzY2VuYXJpbzogJ0EgKGVycm9yKSwgQicsIGNvbmN1cnJlbmN5OiAxLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQScgfSwgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snIH1dKSwgZXhwZWN0ZWRFcnJvcjogJ0EnLCBleHBlY3RlZFN0YWNrczogW10gfSxcbiAgICB7IHNjZW5hcmlvOiAnQSwgQiAoZXJyb3IpJywgY29uY3VycmVuY3k6IDEsIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW3sgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LCB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQicgfV0pLCBleHBlY3RlZEVycm9yOiAnQicsIGV4cGVjdGVkU3RhY2tzOiBbJ0EnXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBIChlcnJvcikgLT4gQicsIGNvbmN1cnJlbmN5OiAxLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQScgfSwgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfV0pLCBleHBlY3RlZEVycm9yOiAnQScsIGV4cGVjdGVkU3RhY2tzOiBbXSB9LFxuICAgIHsgc2NlbmFyaW86ICdbdW5zb3J0ZWRdIEEgKGVycm9yKSAtPiBCJywgY29uY3VycmVuY3k6IDEsIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW3sgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH0sIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgZGlzcGxheU5hbWU6ICdBJyB9XSksIGV4cGVjdGVkRXJyb3I6ICdBJywgZXhwZWN0ZWRTdGFja3M6IFtdIH0sXG4gICAge1xuICAgICAgc2NlbmFyaW86ICdBIChlcnJvcikgLT4gQiwgQyAtPiBEJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJywgZGlzcGxheU5hbWU6ICdBJyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LFxuICAgICAgICB7IGlkOiAnQycsIHR5cGU6ICdzdGFjaycgfSxcbiAgICAgICAgeyBpZDogJ0QnLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydDJ10gfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWRFcnJvcjogJ0EnLFxuICAgICAgZXhwZWN0ZWRTdGFja3M6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgc2NlbmFyaW86ICdBIC0+IEIsIEMgKGVycm9yKSAtPiBEJyxcbiAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgICAgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbXG4gICAgICAgIHsgaWQ6ICdBJywgdHlwZTogJ3N0YWNrJyB9LFxuICAgICAgICB7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LFxuICAgICAgICB7IGlkOiAnQycsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQycsIG5hbWU6IFNMT1cgfSxcbiAgICAgICAgeyBpZDogJ0QnLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydDJ10gfSxcbiAgICAgIF0pLFxuICAgICAgZXhwZWN0ZWRFcnJvcjogJ0MnLFxuICAgICAgZXhwZWN0ZWRTdGFja3M6IFsnQSddLFxuICAgIH0sXG5cbiAgICAvLyBDb25jdXJyZW5jeSAyXG4gICAgeyBzY2VuYXJpbzogJ0EgKGVycm9yKScsIGNvbmN1cnJlbmN5OiAyLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQScgfV0pLCBleHBlY3RlZEVycm9yOiAnQScsIGV4cGVjdGVkU3RhY2tzOiBbXSB9LFxuICAgIHsgc2NlbmFyaW86ICdBIChlcnJvciksIEInLCBjb25jdXJyZW5jeTogMiwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snLCBkaXNwbGF5TmFtZTogJ0EnIH0sIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJyB9XSksIGV4cGVjdGVkRXJyb3I6ICdBJywgZXhwZWN0ZWRTdGFja3M6IFsnQiddIH0sXG4gICAgeyBzY2VuYXJpbzogJ0EsIEIgKGVycm9yKScsIGNvbmN1cnJlbmN5OiAyLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycgfSwgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBkaXNwbGF5TmFtZTogJ0InIH1dKSwgZXhwZWN0ZWRFcnJvcjogJ0InLCBleHBlY3RlZFN0YWNrczogWydBJ10gfSxcbiAgICB7IHNjZW5hcmlvOiAnQSAoZXJyb3IpIC0+IEInLCBjb25jdXJyZW5jeTogMiwgdG9EZXBsb3k6IGNyZWF0ZUFydGlmYWN0cyhbeyBpZDogJ0EnLCB0eXBlOiAnc3RhY2snLCBkaXNwbGF5TmFtZTogJ0EnIH0sIHsgaWQ6ICdCJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQSddIH1dKSwgZXhwZWN0ZWRFcnJvcjogJ0EnLCBleHBlY3RlZFN0YWNrczogW10gfSxcbiAgICB7IHNjZW5hcmlvOiAnW3Vuc29ydGVkXSBBIChlcnJvcikgLT4gQicsIGNvbmN1cnJlbmN5OiAyLCB0b0RlcGxveTogY3JlYXRlQXJ0aWZhY3RzKFt7IGlkOiAnQicsIHR5cGU6ICdzdGFjaycsIHN0YWNrRGVwZW5kZW5jaWVzOiBbJ0EnXSB9LCB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQScgfV0pLCBleHBlY3RlZEVycm9yOiAnQScsIGV4cGVjdGVkU3RhY2tzOiBbXSB9LFxuICAgIHtcbiAgICAgIHNjZW5hcmlvOiAnQSAoZXJyb3IpIC0+IEIsIEMgLT4gRCcsXG4gICAgICBjb25jdXJyZW5jeTogMixcbiAgICAgIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW1xuICAgICAgICB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycsIGRpc3BsYXlOYW1lOiAnQScgfSxcbiAgICAgICAgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfSxcbiAgICAgICAgeyBpZDogJ0MnLCB0eXBlOiAnc3RhY2snIH0sXG4gICAgICAgIHsgaWQ6ICdEJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQyddIH0sXG4gICAgICBdKSxcbiAgICAgIGV4cGVjdGVkRXJyb3I6ICdBJyxcbiAgICAgIGV4cGVjdGVkU3RhY2tzOiBbJ0MnXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjZW5hcmlvOiAnQSAtPiBCLCBDIChlcnJvcikgLT4gRCcsXG4gICAgICBjb25jdXJyZW5jeTogMixcbiAgICAgIHRvRGVwbG95OiBjcmVhdGVBcnRpZmFjdHMoW1xuICAgICAgICB7IGlkOiAnQScsIHR5cGU6ICdzdGFjaycgfSxcbiAgICAgICAgeyBpZDogJ0InLCB0eXBlOiAnc3RhY2snLCBzdGFja0RlcGVuZGVuY2llczogWydBJ10gfSxcbiAgICAgICAgeyBpZDogJ0MnLCB0eXBlOiAnc3RhY2snLCBkaXNwbGF5TmFtZTogJ0MnLCBuYW1lOiBTTE9XIH0sXG4gICAgICAgIHsgaWQ6ICdEJywgdHlwZTogJ3N0YWNrJywgc3RhY2tEZXBlbmRlbmNpZXM6IFsnQyddIH0sXG4gICAgICBdKSxcbiAgICAgIGV4cGVjdGVkRXJyb3I6ICdDJyxcbiAgICAgIGV4cGVjdGVkU3RhY2tzOiBbJ0EnLCAnQiddLFxuICAgIH0sXG4gIF0pKCdGYWlsdXJlIC0gQ29uY3VycmVuY3k6ICRjb25jdXJyZW5jeSAtICRzY2VuYXJpbycsIGFzeW5jICh7IGNvbmN1cnJlbmN5LCBleHBlY3RlZEVycm9yLCB0b0RlcGxveSwgZXhwZWN0ZWRTdGFja3MgfSkgPT4ge1xuICAgIGNvbnN0IGdyYXBoID0gbmV3IFdvcmtHcmFwaCgpO1xuICAgIGFkZFRlc3RBcnRpZmFjdHNUb0dyYXBoKHRvRGVwbG95LCBncmFwaCk7XG5cbiAgICBhd2FpdCBleHBlY3QoZ3JhcGguZG9QYXJhbGxlbChjb25jdXJyZW5jeSwgY2FsbGJhY2tzKSkucmVqZWN0cy50b1Rocm93RXJyb3IoZXhwZWN0ZWRFcnJvcik7XG5cbiAgICBleHBlY3QoYWN0aW9uZWRBc3NldHMpLnRvU3RyaWN0RXF1YWwoZXhwZWN0ZWRTdGFja3MpO1xuICB9KTtcbn0pO1xuXG5pbnRlcmZhY2UgVGVzdEFydGlmYWN0IHtcbiAgc3RhY2tEZXBlbmRlbmNpZXM/OiBzdHJpbmdbXTtcbiAgYXNzZXREZXBlbmRlbmNpZXM/OiBzdHJpbmdbXTtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogJ3N0YWNrJyB8ICdhc3NldCcgfCAndHJlZSd8ICduZXN0ZWQnO1xuICBuYW1lPzogbnVtYmVyO1xuICBkaXNwbGF5TmFtZT86IHN0cmluZztcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJ0aWZhY3RzKGFydGlmYWN0czogVGVzdEFydGlmYWN0W10pIHtcbiAgcmV0dXJuIGFydGlmYWN0cztcbn1cblxuZnVuY3Rpb24gYWRkVGVzdEFydGlmYWN0c1RvR3JhcGgodG9EZXBsb3k6IFRlc3RBcnRpZmFjdFtdLCBncmFwaDogV29ya0dyYXBoKSB7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0b0RlcGxveSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICBjYXNlICdzdGFjayc6XG4gICAgICAgIGdyYXBoLmFkZE5vZGVzKHtcbiAgICAgICAgICB0eXBlOiAnc3RhY2snLFxuICAgICAgICAgIGlkOiBub2RlLmlkLFxuICAgICAgICAgIGRlcGxveW1lbnRTdGF0ZTogRGVwbG95bWVudFN0YXRlLlBFTkRJTkcsXG4gICAgICAgICAgc3RhY2s6IHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIHNtdWdnbGluZyBpbmZvcm1hdGlvbiBoZXJlIHNvIHRoYXQgdGhlIHNldCBvZiBjYWxsYmFja3MgY2FuIGRvIHNvbWUgYXBwcm9wcmlhdGUgYWN0aW9uXG4gICAgICAgICAgICBzdGFja05hbWU6IG5vZGUubmFtZSwgLy8gVXNlZCB0byBzbXVnZ2xlIHNsZWVwIGR1cmF0aW9uXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogbm9kZS5kaXNwbGF5TmFtZSwgLy8gVXNlZCB0byBzbXVnZ2xlIGV4Y2VwdGlvbiB0cmlnZ2Vyc1xuICAgICAgICAgIH0gYXMgYW55LFxuICAgICAgICAgIGRlcGVuZGVuY2llczogbmV3IFNldChbLi4ubm9kZS5zdGFja0RlcGVuZGVuY2llcyA/PyBbXSwgLi4uKG5vZGUuYXNzZXREZXBlbmRlbmNpZXMgPz8gW10pLm1hcCh4ID0+IGAke3h9LXB1Ymxpc2hgKV0pLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhc3NldCc6XG4gICAgICAgIGdyYXBoLmFkZE5vZGVzKHtcbiAgICAgICAgICB0eXBlOiAnYXNzZXQtYnVpbGQnLFxuICAgICAgICAgIGlkOiBgJHtub2RlLmlkfS1idWlsZGAsXG4gICAgICAgICAgZGVwbG95bWVudFN0YXRlOiBEZXBsb3ltZW50U3RhdGUuUEVORElORyxcbiAgICAgICAgICBhc3NldDogRFVNTVksXG4gICAgICAgICAgYXNzZXRNYW5pZmVzdDogRFVNTVksXG4gICAgICAgICAgYXNzZXRNYW5pZmVzdEFydGlmYWN0OiBEVU1NWSxcbiAgICAgICAgICBwYXJlbnRTdGFjazogRFVNTVksXG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBuZXcgU2V0KFsuLi5ub2RlLnN0YWNrRGVwZW5kZW5jaWVzID8/IFtdLCAuLi4obm9kZS5hc3NldERlcGVuZGVuY2llcyA/PyBbXSkubWFwKHggPT4gYCR7eH0tcHVibGlzaGApXSksXG4gICAgICAgIH0pO1xuICAgICAgICBncmFwaC5hZGROb2Rlcyh7XG4gICAgICAgICAgdHlwZTogJ2Fzc2V0LXB1Ymxpc2gnLFxuICAgICAgICAgIGlkOiBgJHtub2RlLmlkfS1wdWJsaXNoYCxcbiAgICAgICAgICBkZXBsb3ltZW50U3RhdGU6IERlcGxveW1lbnRTdGF0ZS5QRU5ESU5HLFxuICAgICAgICAgIGFzc2V0OiBEVU1NWSxcbiAgICAgICAgICBhc3NldE1hbmlmZXN0OiBEVU1NWSxcbiAgICAgICAgICBhc3NldE1hbmlmZXN0QXJ0aWZhY3Q6IERVTU1ZLFxuICAgICAgICAgIHBhcmVudFN0YWNrOiBEVU1NWSxcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IG5ldyBTZXQoW2Ake25vZGUuaWR9LWJ1aWxkYF0pLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGdyYXBoLnJlbW92ZVVuYXZhaWxhYmxlRGVwZW5kZW5jaWVzKCk7XG59Il19